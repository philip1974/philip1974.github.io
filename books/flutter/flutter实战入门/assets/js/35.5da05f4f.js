(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{735:function(e,t,r){"use strict";r.r(t);var a=r(44),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("重磅更新 Dart 2.12")]),e._v(" "),r("p",[e._v("今天，我们宣布推出Dart 2.12，该版本具有稳定的"),r("a",{attrs:{href:"https://dart.dev/null-safety",target:"_blank",rel:"noopener noreferrer"}},[e._v("sound null safety"),r("OutboundLink")],1),e._v("和"),r("a",{attrs:{href:"https://dart.dev/guides/libraries/c-interop",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dart FFI版本"),r("OutboundLink")],1),e._v("。空安全是我们最新的主要生产力功能，旨在帮助您避免空错误，这是一类通常很难发现的错误，如"),r("a",{attrs:{href:"https://www.youtube.com/watch?v=iYhOU9AuaFs&feature=emb_logo",target:"_blank",rel:"noopener noreferrer"}},[e._v("本视频介绍中所述"),r("OutboundLink")],1),e._v("。FFI是一种互操作性机制，可让您调用用C编程语言编写的现有代码，例如调用Windows "),r("a",{attrs:{href:"https://pub.dev/packages/win32",target:"_blank",rel:"noopener noreferrer"}},[e._v("Win32 API"),r("OutboundLink")],1),e._v("。Dart 2.12现已上市。")]),e._v(" "),r("p",[r("img",{attrs:{src:"http://img.laomengit.com/20210510213904.png",alt:""}})]),e._v(" "),r("h3",{attrs:{id:"dart平台的独特功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dart平台的独特功能"}},[e._v("#")]),e._v(" Dart平台的独特功能")]),e._v(" "),r("p",[e._v("在我们详细研究null安全和FFI之前，让我们讨论一下Dart平台如何将它们适合我们的目标。编程语言倾向于共享许多功能。例如，许多语言支持面向对象的编程或在Web上运行。真正使语言与众不同的是它们独特的功能组合。")]),e._v(" "),r("p",[r("img",{attrs:{src:"http://img.laomengit.com/20210510213909.png",alt:""}})]),e._v(" "),r("p",[e._v("Dart的独特功能涵盖了三个方面：")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("可移植性")]),e._v("：高效的编译器为设备生成x86和ARM机器代码，并为Web生成优化的JavaScript。一个"),r("a",{attrs:{href:"https://dart.dev/overview#platform",target:"_blank",rel:"noopener noreferrer"}},[e._v("广泛的目标"),r("OutboundLink")],1),e._v("是支持-移动设备，台式机，应用后端，等等。大量的库和软件包提供了可在所有平台上使用的一致的API，从而进一步降低了创建真正的多平台应用程序的成本。")]),e._v(" "),r("li",[r("strong",[e._v("高效")]),e._v("：Dart平台支持热重装，从而可以对本机设备和Web进行快速，迭代的开发。Dart提供了丰富的结构，如隔离和异步/等待，用于处理常见的并发和事件驱动的应用程序模式。")]),e._v(" "),r("li",[r("strong",[e._v("健壮")]),e._v("：Dart健全的，null安全类型系统会在开发过程中捕获错误。整个平台具有高度的可扩展性和可靠性，其广泛的应用程序用于生产已经有十多年的历史了，其中包括Google Ads和Google Assistant等业务关键型应用程序。")])]),e._v(" "),r("p",[e._v("可靠的零安全性使类型系统更加强大，并实现了更好的性能。Dart FFI使您可以使用现有的C库来实现更好的可移植性，并且可以选择对性能要求很高的任务使用经过高度调整的C代码。")]),e._v(" "),r("h3",{attrs:{id:"null安全"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#null安全"}},[e._v("#")]),e._v(" null安全")]),e._v(" "),r("p",[e._v("自"),r("a",{attrs:{href:"https://medium.com/dartlang/announcing-dart-2-80ba01f43b6",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dart 2.0"),r("OutboundLink")],1),e._v("引入null安全类型系统以来，null安全是Dart语言的最大补充。null安全性进一步增强了类型系统，使您能够捕获空错误，这是应用程序崩溃的常见原因。通过选择空安全性，您可以在开发过程中捕获空错误，从而防止生产崩溃。")]),e._v(" "),r("p",[e._v("合理的零安全性是围绕"),r("a",{attrs:{href:"https://dart.dev/null-safety#null-safety-principles",target:"_blank",rel:"noopener noreferrer"}},[e._v("一些核心原则"),r("OutboundLink")],1),e._v("设计的。让我们重新审视这些原则如何影响您作为开发人员。")]),e._v(" "),r("h3",{attrs:{id:"默认情况下不可为空：对类型系统的根本更改"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#默认情况下不可为空：对类型系统的根本更改"}},[e._v("#")]),e._v(" 默认情况下不可为空：对类型系统的根本更改")]),e._v(" "),r("p",[e._v("空安全之前的核心挑战是，您无法分辨预期传递空值的代码与不能使用空值的代码之间的区别。几个月前，我们在Flutter主渠道渠道中发现了一个错误，该错误会在某些机器配置上使各种flutter工具命令崩溃，并出现null错误："),r("code",[e._v("The method '>=' was called on null")]),e._v("。根本的问题是这样的代码：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("final int major = version?.major;\nfinal int minor = version?.minor;\nif (globals.platform.isMacOS) {\n  // plugin path of Android Studio changed after version 4.1.\n  if (major >= 4 && minor >= 1) {\n  ...\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br")])]),r("p",[e._v("您能发现错误吗？因为"),r("code",[e._v("version")]),e._v("可以为null，所以"),r("code",[e._v("major")]),e._v("和"),r("code",[e._v("minor")]),e._v("也可以为null。似乎很容易孤立地发现此错误，但实际上，即使是经过严格的代码审查过程（如Flutter回购中使用的代码），这样的代码也始终无处不在。出于安全考虑，静态分析会立即捕获此问题。（"),r("a",{attrs:{href:"https://dartpad.dev/0e9797be7488d8ec6c3fca92b7f2740f?null_safety=true",target:"_blank",rel:"noopener noreferrer"}},[e._v("可以在DartPad中试用"),r("OutboundLink")],1),e._v("。）")]),e._v(" "),r("p",[r("img",{attrs:{src:"http://img.laomengit.com/20210510213922.png",alt:""}})]),e._v(" "),r("p",[e._v("IDE中分析输出的屏幕截图")]),e._v(" "),r("p",[e._v("那是一个非常简单的错误。在Google内部内部在代码中早期使用null安全性的过程中，我们发现了很多复杂的错误。其中一些是已经存在多年的bug，但是如果没有null安全性的额外静态检查，团队就无法找到原因。这里有一些例子：")]),e._v(" "),r("ul",[r("li",[e._v("一个内部团队发现，他们经常检查永远不能为null的表达式的null值。使用"),r("a",{attrs:{href:"https://developers.google.com/protocol-buffers",target:"_blank",rel:"noopener noreferrer"}},[e._v("protobuf的"),r("OutboundLink")],1),e._v("代码中最经常出现此问题，其中可选字段在未设置时返回默认值，并且永远不会为null。如此一来，通过混淆默认值和空值，代码错误地检查了默认条件。")]),e._v(" "),r("li",[e._v("Google Pay小组在Flutter代码中发现了一些错误，这些错误会在尝试"),r("code",[e._v("State")]),e._v("在上下文之外访问Flutter对象时失败"),r("code",[e._v("Widget")]),e._v("。在实现null安全之前，这些对象将返回null并掩盖错误；出于安全考虑，声音分析确定这些属性永远不会为空，并引发了分析错误。")]),e._v(" "),r("li",[e._v("Flutter小组发现了一个错误，如果将该错误"),r("code",[e._v("null")]),e._v("传递给中的"),r("code",[e._v("scene")]),e._v("参数，Flutter引擎可能会崩溃"),r("code",[e._v("Window.render()")]),e._v("。在进行null安全迁移期间，他们添加了一个提示，"),r("a",{attrs:{href:"https://github.com/cbracken/engine/blob/bad869e229a8a02cad6e63d12e80807b33b5c12f/lib/ui/window.dart#L1069",target:"_blank",rel:"noopener noreferrer"}},[e._v("将Scene标记为non-nullable"),r("OutboundLink")],1),e._v("，然后能够轻松地防止可能触发null的潜在应用崩溃。")])]),e._v(" "),r("h3",{attrs:{id:"默认情况下使用非空"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#默认情况下使用非空"}},[e._v("#")]),e._v(" 默认情况下使用非空")]),e._v(" "),r("p",[e._v("一旦"),r("a",{attrs:{href:"https://dart.dev/null-safety#enable-null-safety",target:"_blank",rel:"noopener noreferrer"}},[e._v("启用空安全"),r("OutboundLink")],1),e._v("，变量声明的基本改变，因为默认的类型是不可为空：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// In null-safe Dart, none of these can ever be null.\nvar i = 42; // Inferred to be an int.\nString name = getFileName();\nfinal b = Foo();\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br")])]),r("p",[e._v("如果要创建一个可以包含值或null的变量，则需要通过"),r("code",[e._v("?")]),e._v("在类型声明中添加后缀来使该变量在变量声明中显式显示：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// aNullableInt can hold either an integer or null.\nint? aNullableInt = null;\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br")])]),r("p",[e._v("空安全性的实现是健壮的，具有丰富的静态流分析功能，使使用可空类型的工作变得更加容易。例如，在检查了null之后，Dart将局部变量的类型从nullable提升为non-nullable：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("int definitelyInt(int? aNullableInt) {\n  if (aNullableInt == null) {\n    return 0;\n  }\n  // aNullableInt has now promoted to a non-null int.\n  return aNullableInt; \n}\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br")])]),r("p",[e._v("我们还添加了一个新关键字"),r("code",[e._v("required")]),e._v("。当命名参数被标记为"),r("code",[e._v("required")]),e._v("（在Flutter小部件API中经常发生）并且调用者忘记提供参数时，就会发生分析错误：")]),e._v(" "),r("p",[r("img",{attrs:{src:"http://img.laomengit.com/20210510213929.png",alt:""}})]),e._v(" "),r("h3",{attrs:{id:"逐步迁移到null安全性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#逐步迁移到null安全性"}},[e._v("#")]),e._v(" 逐步迁移到null安全性")]),e._v(" "),r("p",[e._v("因为null安全性是对我们的打字系统的根本改变，所以如果我们坚持强制采用，那将是极度破坏性的。这样*，你*决定到时是正确的，空安全是一项可选功能：你可以用Dart 2.12，而无需被迫启用空安全。您甚至可以依赖已经启用了空安全性的软件包，无论您的应用程序或软件包是否启用了空安全性。")]),e._v(" "),r("p",[e._v("为了帮助您将现有代码迁移到安全性为零的状态，我们提供了迁移工具和"),r("a",{attrs:{href:"https://dart.dev/null-safety/migration-guide",target:"_blank",rel:"noopener noreferrer"}},[e._v("迁移指南"),r("OutboundLink")],1),e._v("。该工具首先分析所有现有代码。然后，您可以交互地查看该工具推断的可空性属性。如果您不同意该工具的任何结论，则可以添加可空性提示以更改推断。添加一些迁移提示可能会对迁移质量产生巨大影响。")]),e._v(" "),r("p",[r("img",{attrs:{src:"http://img.laomengit.com/20210510213950.png",alt:""}})]),e._v(" "),r("p",[e._v("目前，使用"),r("code",[e._v("dart create")]),e._v("和"),r("code",[e._v("flutter create")]),e._v("不启用声音无效安全性创建的新程序包和应用程序。当我们看到大多数生态系统已经迁移时，我们希望在将来的稳定版本中对此进行更改。您可以使用轻松在新创建的包或应用中"),r("a",{attrs:{href:"https://dart.dev/null-safety#create",target:"_blank",rel:"noopener noreferrer"}},[e._v("启用null安全"),r("OutboundLink")],1),r("code",[e._v("dart migrate")]),e._v("。")]),e._v(" "),r("h3",{attrs:{id:"dart生态系统的null安全迁移状况"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dart生态系统的null安全迁移状况"}},[e._v("#")]),e._v(" Dart生态系统的null安全迁移状况")]),e._v(" "),r("p",[e._v("在过去的一年中，我们提供了几种null安全性的预览版和Beta版，目的是为生态系统植入支持无效性安全的软件包。这项准备工作很重要，因为我们建议"),r("a",{attrs:{href:"https://dart.dev/null-safety/migration-guide#step1-wait",target:"_blank",rel:"noopener noreferrer"}},[e._v("按顺序迁移，以确保null安全性"),r("OutboundLink")],1),e._v("-您不应该在软件包或应用程序的所有依赖项都已迁移之前就对其进行迁移。")]),e._v(" "),r("p",[e._v("我们已经发布了"),r("a",{attrs:{href:"https://pub.dev/packages?q=publisher%3Adart.dev&sort=popularity&null-safe=1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dart"),r("OutboundLink")],1),e._v("，"),r("a",{attrs:{href:"https://pub.dev/packages?q=publisher%3Aflutter.dev&sort=popularity&null-safe=1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Flutter"),r("OutboundLink")],1),e._v("，"),r("a",{attrs:{href:"https://pub.dev/packages?q=publisher%3Afirebase.google.com&sort=popularity&null-safe=1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Firebase"),r("OutboundLink")],1),e._v("和"),r("a",{attrs:{href:"https://pub.dev/packages?q=publisher%3Amaterial.io&sort=popularity&null-safe=1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Material"),r("OutboundLink")],1),e._v("团队提供的数百个软件包的null安全版本。而且，我们已经从惊人的Dart和Flutter生态系统中获得了巨大的支持，因此pub.dev现在有超过一千个支持null安全的软件包。重要的是，最受欢迎的软件包已首先迁移，因此，对于今天的发布而言，最流行的前100个软件包中有98％，前250个顶级软件包中的78％和前500个顶级软件包中的57％已经支持零安全性。我们期待在未来几周内在pub.dev上看到更多具有空安全性的软件包。"),r("a",{attrs:{href:"https://github.com/dart-lang/sdk/wiki/Null-safety-migration-status",target:"_blank",rel:"noopener noreferrer"}},[e._v("我们的分析"),r("OutboundLink")],1),e._v("表明，pub.dev上的绝大多数软件包已被解除阻止，可以"),r("a",{attrs:{href:"https://dart.dev/null-safety/migration-guide",target:"_blank",rel:"noopener noreferrer"}},[e._v("开始迁移"),r("OutboundLink")],1),e._v("。")]),e._v(" "),r("h3",{attrs:{id:"空安全的好处"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#空安全的好处"}},[e._v("#")]),e._v(" 空安全的好处")]),e._v(" "),r("p",[e._v("完全迁移后，Dart的空安全性就可以了。这意味着Dart 100％确保具有不可为null的类型的表达式不能为null。当Dart分析您的代码并确定某个变量不可为空时，该变量"),r("em",[e._v("始终为")]),e._v("不可为空。Dart与Swift共享声音上的安全性，但其他编程语言却很少。")]),e._v(" "),r("p",[e._v("Dart的零安全性的健全性还具有另一个受欢迎的含义：这意味着您的程序可以更小，更快。由于Dart确保不可为空的变量永远不会为null，因此"),r("a",{attrs:{href:"https://medium.com/dartlang/dart-and-the-performance-benefits-of-sound-types-6ceedd5b6cdc",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dart可以进行优化"),r("OutboundLink")],1),e._v("。例如，Dart提前（AOT）编译器可以生成更小，更快的本机代码，因为当知道变量不为null时，它不需要添加对null的检查。")]),e._v(" "),r("h3",{attrs:{id:"dart-ffi，用于将dart与c库集成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dart-ffi，用于将dart与c库集成"}},[e._v("#")]),e._v(" Dart FFI，用于将Dart与C库集成")]),e._v(" "),r("p",[e._v("Dart FFI使您能够利用C库中的现有代码，以实现更好的可移植性，以及与经过高度调整的C代码集成以执行对性能至关重要的任务。从Dart 2.12开始，"),r("a",{attrs:{href:"https://dart.dev/guides/libraries/c-interop",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dart FFI"),r("OutboundLink")],1),e._v("已脱离"),r("em",[e._v("Beta")]),e._v("阶段，现已被认为稳定并且可以投入生产。我们还添加了一些新功能，包括嵌套结构和按值传递结构。")]),e._v(" "),r("h3",{attrs:{id:"通过值传递结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#通过值传递结构"}},[e._v("#")]),e._v(" 通过值传递结构")]),e._v(" "),r("p",[e._v("可以在C代码中按引用和按值传递结构。FFI以前仅支持按引用传递，但从Dart 2.12开始，您可以按值传递结构。这是两个同时通过引用和值传递的C函数的小示例：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("struct Link {\n  double value;\n  Link* next;\n};\nvoid MoveByReference(Link* link) {\n  link->value = link->value + 10.0;\n}\nCoord MoveByValue(Link link) {\n  link.value = link.value + 10.0;\n  return link;\n}\n\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br")])]),r("h3",{attrs:{id:"嵌套结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#嵌套结构"}},[e._v("#")]),e._v(" 嵌套结构")]),e._v(" "),r("p",[e._v("C API通常使用嵌套结构-本身包含结构的结构，例如以下示例：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("struct Wheel {\n  int spokes;\n};\nstruct Bike {\n  struct Wheel front;\n  struct Wheel rear;\n  int buildYear;\n};\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br")])]),r("p",[e._v("从Dart 2.12开始，FFI支持嵌套结构。")]),e._v(" "),r("h3",{attrs:{id:"api变更"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#api变更"}},[e._v("#")]),e._v(" API变更")]),e._v(" "),r("p",[e._v("为了声明FFI稳定并支持上述功能，我们进行了一些较小的API更改。")]),e._v(" "),r("p",[e._v("现在禁止创建空结构（打破更改"),r("a",{attrs:{href:"https://github.com/dart-lang/sdk/issues/44622",target:"_blank",rel:"noopener noreferrer"}},[e._v("＃44622"),r("OutboundLink")],1),e._v("），并产生弃用警告。您可以使用新的类型"),r("code",[e._v("Opaque")]),e._v("来表示空结构。的"),r("code",[e._v("dart:ffi")]),e._v("功能"),r("code",[e._v("sizeOf")]),e._v("，"),r("code",[e._v("elementAt")]),e._v("以及"),r("code",[e._v("ref")]),e._v("现在需要编译时类型参数（重大更改"),r("a",{attrs:{href:"https://github.com/dart-lang/sdk/issues/44621",target:"_blank",rel:"noopener noreferrer"}},[e._v("＃44621"),r("OutboundLink")],1),e._v("）。因为"),r("code",[e._v("package:ffi")]),e._v("已添加了新的便利功能，所以在常见情况下，不需要分配和释放内存的额外样板：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// Allocate a pointer to an Utf8 array, fill it from a Dart string,\n// pass it to a C function, convert the result, and free the arg.\n//\n// Before API change:\nfinal pointer = allocate<Int8>(count: 10);\nfree(pointer);\nfinal arg = Utf8.toUtf8('Michael');\nvar result = helloWorldInC(arg);\nprint(Utf8.fromUtf8(result);\nfree(arg);\n// After API change:\nfinal pointer = calloc<Int8>(10);\ncalloc.free(pointer);\nfinal arg = 'Michael'.toNativeUtf8();\nvar result = helloWorldInC(arg);\nprint(result.toDartString);\ncalloc.free(arg);\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br"),r("span",{staticClass:"line-number"},[e._v("13")]),r("br"),r("span",{staticClass:"line-number"},[e._v("14")]),r("br"),r("span",{staticClass:"line-number"},[e._v("15")]),r("br"),r("span",{staticClass:"line-number"},[e._v("16")]),r("br"),r("span",{staticClass:"line-number"},[e._v("17")]),r("br")])]),r("h3",{attrs:{id:"自动生成ffi绑定"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自动生成ffi绑定"}},[e._v("#")]),e._v(" 自动生成FFI绑定")]),e._v(" "),r("p",[e._v("对于较大的API曲面，编写与C代码集成的Dart绑定可能非常耗时。为了减轻这种负担，我们构建了一个绑定生成器，用于根据C头文件自动创建FFI包装器。我们邀请您尝试一下："),r("code",[e._v("package:ffigen")]),e._v("。")]),e._v(" "),r("h3",{attrs:{id:"ffi路线图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ffi路线图"}},[e._v("#")]),e._v(" FFI路线图")]),e._v(" "),r("p",[e._v("随着核心FFI平台的完成，我们将重点转移到扩展FFI功能集，使其具有在核心平台之上分层的功能。我们正在调查的一些功能包括：")]),e._v(" "),r("ul",[r("li",[e._v("特定于ABI的数据类型，例如int，long，size_t（"),r("a",{attrs:{href:"https://github.com/dart-lang/sdk/issues/36140",target:"_blank",rel:"noopener noreferrer"}},[e._v("＃36140"),r("OutboundLink")],1),e._v("）")]),e._v(" "),r("li",[e._v("内联结构中的数组（"),r("a",{attrs:{href:"https://github.com/dart-lang/sdk/issues/35763",target:"_blank",rel:"noopener noreferrer"}},[e._v("＃35763"),r("OutboundLink")],1),e._v("）")]),e._v(" "),r("li",[e._v("打包的结构（"),r("a",{attrs:{href:"https://github.com/dart-lang/sdk/issues/38158",target:"_blank",rel:"noopener noreferrer"}},[e._v("＃38158"),r("OutboundLink")],1),e._v("）")]),e._v(" "),r("li",[e._v("联合类型（"),r("a",{attrs:{href:"https://github.com/dart-lang/sdk/issues/38491",target:"_blank",rel:"noopener noreferrer"}},[e._v("＃38491"),r("OutboundLink")],1),e._v("）")]),e._v(" "),r("li",[e._v("将终结器暴露给Dart（"),r("a",{attrs:{href:"https://github.com/dart-lang/sdk/issues/35770",target:"_blank",rel:"noopener noreferrer"}},[e._v("＃35770"),r("OutboundLink")],1),e._v("；但是请注意，您已经可以"),r("a",{attrs:{href:"https://github.com/dart-lang/sdk/issues/35770",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用C的终结器"),r("OutboundLink")],1),e._v("）")])]),e._v(" "),r("h3",{attrs:{id:"ffi的示例用法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ffi的示例用法"}},[e._v("#")]),e._v(" FFI的示例用法")]),e._v(" "),r("p",[e._v("我们已经看到Dart FFI的许多创造性用法，以与各种基于C的API集成。这里有一些例子：")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://pub.dev/packages/open_file",target:"_blank",rel:"noopener noreferrer"}},[e._v("open_file"),r("OutboundLink")],1),e._v("是用于跨多个平台打开文件的单个API。它使用FFI来调用Windows，macOS和Linux上的本机操作系统API。")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://pub.dev/packages/win32",target:"_blank",rel:"noopener noreferrer"}},[e._v("win32"),r("OutboundLink")],1),e._v("封装了最常见的Win32 API，从而可以直接从Dart调用各种Windows API。")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://pub.dev/packages/objectbox",target:"_blank",rel:"noopener noreferrer"}},[e._v("objectbox"),r("OutboundLink")],1),e._v("是由基于C的实现支持的快速数据库。")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://pub.dev/packages/tflite_flutter",target:"_blank",rel:"noopener noreferrer"}},[e._v("tflite_flutter"),r("OutboundLink")],1),e._v("使用FFI包装TensorFlow Lite API。")])]),e._v(" "),r("h3",{attrs:{id:"dart语言的下一步是什么？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dart语言的下一步是什么？"}},[e._v("#")]),e._v(" Dart语言的下一步是什么？")]),e._v(" "),r("p",[e._v("null安全性是我们几年来对Dart语言所做的最大改变。接下来，我们将考虑在我们强大的基础上对语言和平台进行更多的增量更改。快速浏览一下我们在"),r("a",{attrs:{href:"https://github.com/dart-lang/language/projects/1",target:"_blank",rel:"noopener noreferrer"}},[e._v("语言设计渠道中"),r("OutboundLink")],1),e._v("正在尝试的一些事情：")]),e._v(" "),r("p",[r("strong",[e._v("类型别名")]),e._v("（"),r("a",{attrs:{href:"https://github.com/dart-lang/language/issues/65",target:"_blank",rel:"noopener noreferrer"}},[e._v("＃65"),r("OutboundLink")],1),e._v("）：可以为非函数类型创建类型别名。例如，您可以创建一个typedef并将其用作变量类型：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("typedef IntList = List <int>; \nIntList il = [1,2,3];\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br")])]),r("p",[r("strong",[e._v("三重移位运算符")]),e._v("（"),r("a",{attrs:{href:"https://github.com/dart-lang/language/issues/120",target:"_blank",rel:"noopener noreferrer"}},[e._v("＃120"),r("OutboundLink")],1),e._v("）：添加了一个新的，完全可重写的"),r("code",[e._v(">>>")]),e._v("运算符，用于对整数进行无符号移位。")]),e._v(" "),r("p",[r("strong",[e._v("通用元数据注释")]),e._v("（"),r("a",{attrs:{href:"https://github.com/dart-lang/language/issues/1297",target:"_blank",rel:"noopener noreferrer"}},[e._v("＃1297"),r("OutboundLink")],1),e._v("）：扩展元数据注释以也支持包含类型参数的注释。")]),e._v(" "),r("p",[r("strong",[e._v("静态元编程")]),e._v("（"),r("a",{attrs:{href:"https://github.com/dart-lang/language/issues/1482",target:"_blank",rel:"noopener noreferrer"}},[e._v("＃1482"),r("OutboundLink")],1),e._v("）：支持静态元编程— Dart程序在编译过程中会生成新的Dart源代码，类似于Rust"),r("a",{attrs:{href:"https://doc.rust-lang.org/book/ch19-06-macros.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("宏"),r("OutboundLink")],1),e._v("和Swift"),r("a",{attrs:{href:"https://github.com/apple/swift-evolution/blob/9992cf3c11c2d5e0ea20bee98657d93902d5b174/proposals/XXXX-function-builders.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("函数生成器"),r("OutboundLink")],1),e._v("。该功能仍处于早期探索阶段，但是我们认为它可以启用当今依赖于代码生成的用例。")]),e._v(" "),r("h3",{attrs:{id:"dart-2-12现已上市"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dart-2-12现已上市"}},[e._v("#")]),e._v(" Dart 2.12现已上市")]),e._v(" "),r("p",[e._v("Dart 2.12和"),r("a",{attrs:{href:"https://flutter.dev/docs/get-started/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dutter "),r("OutboundLink")],1),r("a",{attrs:{href:"https://dart.dev/get-dart",target:"_blank",rel:"noopener noreferrer"}},[e._v("2.12"),r("OutboundLink")],1),e._v("和"),r("a",{attrs:{href:"https://flutter.dev/docs/get-started/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Flutter 2.0"),r("OutboundLink")],1),e._v(" SDK现已提供具有可靠的null安全性和稳定FFI的"),r("a",{attrs:{href:"https://dart.dev/get-dart",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dart"),r("OutboundLink")],1),e._v("。请花点时间查看"),r("a",{attrs:{href:"https://dart.dev/null-safety#known-issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dart"),r("OutboundLink")],1),e._v("和"),r("a",{attrs:{href:"https://flutter.dev/docs/null-safety#known-issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("Flutter"),r("OutboundLink")],1),e._v("的已知的无效安全问题。如果您发现任何其他问题，请在"),r("a",{attrs:{href:"https://github.com/dart-lang/sdk/issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dart问题跟踪器中"),r("OutboundLink")],1),e._v("报告这些"),r("a",{attrs:{href:"https://github.com/dart-lang/sdk/issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("问题"),r("OutboundLink")],1),e._v("。")]),e._v(" "),r("p",[e._v("如果您已经开发了发布在"),r("a",{attrs:{href:"https://pub.dev/",target:"_blank",rel:"noopener noreferrer"}},[e._v("pub.dev"),r("OutboundLink")],1),e._v("上的"),r("a",{attrs:{href:"https://pub.dev/",target:"_blank",rel:"noopener noreferrer"}},[e._v("软件包"),r("OutboundLink")],1),e._v("，请立即查看"),r("a",{attrs:{href:"https://dart.dev/null-safety/migration-guide",target:"_blank",rel:"noopener noreferrer"}},[e._v("迁移指南"),r("OutboundLink")],1),e._v("，并了解如何迁移以达到安全性。迁移软件包可能会帮助解除阻止其他依赖于该软件包的软件包和应用程序。我们还要感谢已经迁移的人！")]),e._v(" "),r("p",[e._v("我们很想听听您在静音安全性和FFI方面的经验。在下面发表评论或通过推特给我们"),r("a",{attrs:{href:"https://twitter.com/dart_lang",target:"_blank",rel:"noopener noreferrer"}},[e._v("@dart_lang"),r("OutboundLink")],1),e._v("。")])])}),[],!1,null,null,null);t.default=n.exports}}]);