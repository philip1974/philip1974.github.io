(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{748:function(s,t,a){"use strict";a.r(t);var n=a(44),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("Flutter 中不得不会的 mixin")]),s._v(" "),a("p",[a("strong",[s._v("mixin")]),s._v(" 是 Dart 中非常重要的概念，对于未接触过此概念的Coder来说尤其重要，最近看源码的时候，由于对 mixin 不熟悉导致理解出现偏差，走了很多弯路，所以这篇文章介绍一下 mixin 概念。")]),s._v(" "),a("p",[s._v("Dart 及 Engine 版本：")]),s._v(" "),a("blockquote",[a("p",[s._v("Engine • revision ae90085a84\nTools • Dart 2.10.4")])]),s._v(" "),a("p",[s._v("请注意版本，不同的版本可能存在差异。")]),s._v(" "),a("p",[s._v("先来看下官方的定义：")]),s._v(" "),a("blockquote",[a("p",[s._v("Mixins are a way of reusing a class’s code in multiple class hierarchies.")]),s._v(" "),a("p",[s._v("Mixins 是一种在多个类层次结构中重用类代码的方法。")])]),s._v(" "),a("p",[s._v("在来看下 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Mixin",target:"_blank",rel:"noopener noreferrer"}},[s._v("Wiki"),a("OutboundLink")],1),s._v(" 的解释：")]),s._v(" "),a("blockquote",[a("p",[s._v('In object-oriented programming languages, a mixin (or mix-in) is a class that contains methods for use by other classes without having to be the parent class of those other classes. How those other classes gain access to the mixin\'s methods depends on the language. Mixins are sometimes described as being "included" rather than "inherited".')]),s._v(" "),a("p",[s._v('Mixins encourage code reuse and can be used to avoid the inheritance ambiguity that multiple inheritance can cause (the "diamond problem"), or to work around lack of support for multiple inheritance in a language. A mixin can also be viewed as an interface with implemented methods. This pattern is an example of enforcing the dependency inversion principle.')])]),s._v(" "),a("p",[s._v("翻译如下：")]),s._v(" "),a("blockquote",[a("p",[s._v("在面向对象的编程语言中，mixin（或mix-in）是一个类，其中包含供其他类使用的方法，而不必成为其他类的父类。 这些其他类如何获得对mixin方法的访问权限取决于语言。 混合素有时被描述为“包含”而不是“继承”。")]),s._v(" "),a("p",[s._v("Mixins鼓励代码重用，并且可用于避免多重继承可能导致的继承歧义（“钻石问题”），或解决语言中对多重继承的支持不足的问题。 混合也可以看作是已实现方法的接口。 此模式是强制执行依赖关系反转原理的示例。")])]),s._v(" "),a("p",[s._v("看完这两段介绍，可能依然对其比较模糊，不要紧，现在只需对其有个概念即可，下面会详细介绍 "),a("strong",[s._v("Mixins")]),s._v(" 的用法，我个人的理解就是："),a("strong",[s._v("Mixins")]),s._v(" 解决了无法多重继承的问题。")]),s._v(" "),a("h3",{attrs:{id:"什么时候需要使用-mixins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候需要使用-mixins"}},[s._v("#")]),s._v(" 什么时候需要使用 Mixins")]),s._v(" "),a("p",[s._v("有如下场景：")]),s._v(" "),a("p",[s._v("定义一个基类人（Person），它有吃（eat）的方法。")]),s._v(" "),a("p",[s._v("有3个实际的人A、B、C，它们都继承 Person，但是3个人有不同的技能：")]),s._v(" "),a("ul",[a("li",[s._v("A ：会唱歌、跳舞")]),s._v(" "),a("li",[s._v("B：会跳舞、写代码")]),s._v(" "),a("li",[s._v("C：会唱歌、写代码")])]),s._v(" "),a("p",[s._v("上面的场景中唱歌、跳舞、写代码是一种技能，并不是每一个人都会的，所以将其定义在 Person 中是不合适的，如果各自定义为一个类，又不能同时继承Person和唱歌、跳舞、写代码，如果将唱歌、跳舞、写代码定义为 Interface ，那么A、B、C中要各自实现其方法，")]),s._v(" "),a("p",[s._v("那要如何实现呢？ "),a("strong",[s._v("Mixins")]),s._v(" 出场啦。")]),s._v(" "),a("p",[s._v("定义一个 Person 基类和功能类唱歌、跳舞、写代码：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Person eat'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dance")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Dance dance'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sing")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Sing sing'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Code")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("code")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Code code'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("定义A、B、C：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Dance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Sing "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Sing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Code "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("C")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Dance "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("注意：混合使用 "),a("strong",[s._v("with")]),s._v(" 关键字。")]),s._v(" "),a("p",[s._v("使用：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[s._v("A a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("eat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("输出日志：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[s._v("flutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Person eat\nflutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Dance dance\nflutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Sing sing\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("可以看到 A 中有了Dance 和Sing的相关的方法。")]),s._v(" "),a("p",[s._v("Dance 是一个 class，如果给其添加构造函数会如何？")]),s._v(" "),a("p",[s._v("给 Dance 添加构造函数，修改如下，")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180526.png",alt:""}})]),s._v(" "),a("p",[s._v("此时发现 A 和 C 无法编译，出现如下错误：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180530.png",alt:""}})]),s._v(" "),a("p",[s._v("很明显，需要 mixin 的类无法定义构造函数。")]),s._v(" "),a("p",[s._v("所以一般会将需要 mixin 的类使用 mixin 关键字：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180534.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"添加限定条件，使用关键字-on"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加限定条件，使用关键字-on"}},[s._v("#")]),s._v(" 添加限定条件，使用关键字 on")]),s._v(" "),a("p",[s._v("接着上面的场景继续，这时定义一个狗的类，目前狗这个类也可以混合 Dance 、Sing 和 Code，")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dog")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" Code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("但是，Code 是人类独有的技能，不希望 Dog 这个类可以mixin，所以给 Code 添加限定条件：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180538.png",alt:""}})]),s._v(" "),a("p",[s._v("使用关键字 "),a("strong",[s._v("on")]),s._v(" 限定Code 只能被 Person 或者其子类 mixin。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180542.png",alt:""}})]),s._v(" "),a("p",[s._v("此时 Dog 无法 mixin Code。")]),s._v(" "),a("p",[s._v("添加限定后，可以重写其方法， Code 重写 Person 的方法：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180546.png",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("super")]),s._v(" 表示调用父类（Person）的方法。")]),s._v(" "),a("h3",{attrs:{id:"如何处理多个类有同一方法的情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何处理多个类有同一方法的情况"}},[s._v("#")]),s._v(" 如何处理多个类有同一方法的情况")]),s._v(" "),a("p",[s._v("假设有D 和 D1 两个类，有同一个方法 d，E mixin D 和 D1：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180550.png",alt:""}})]),s._v(" "),a("p",[s._v("此时，调用 e.d 方法：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[s._v("E e "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ne"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("输出：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[s._v("flutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" D1 d\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("说明后面的将前面的覆盖了，调换下D 和 D1的顺序：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" D1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" D "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("输出：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[s._v("flutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" D d\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("此时在 E 中也添加 d 方法：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180554.png",alt:""}})]),s._v(" "),a("p",[s._v("输出：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[s._v("flutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" E d\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("说明 E 中 方法覆盖了原来的。")]),s._v(" "),a("p",[s._v("E 中 d 方法可以调用 "),a("strong",[s._v("super.d()")])]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180558.png",alt:""}})]),s._v(" "),a("p",[s._v("输出：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[s._v("flutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" D d\nflutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" E d\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("假设现在有F、G、H 三个类，都有 a 方法，")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180602.png",alt:""}})]),s._v(" "),a("p",[s._v("有如下定义的类：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180607.png",alt:""}})]),s._v(" "),a("p",[s._v("那么下面会输出什么值：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180611.png",alt:""}})]),s._v(" "),a("p",[s._v("答案是：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[s._v("flutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" G a\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("记住：混合类时，进行混合的多个类是线性的，这是他们共有方法不冲突的原因，混合的顺序非常重要，因为它决定了混合时相同的方法的处理逻辑。")]),s._v(" "),a("p",[s._v("再次看下 FG 的混合情况：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180615.png",alt:""}})]),s._v(" "),a("p",[s._v("FG 继承 H，混合 F 和 G，对于相同方法的优先级为：G > F > H，因此共有方法 a，最后执行的是 G 类中的 a 方法。")]),s._v(" "),a("p",[s._v("那么如果 FG 中也有 a 方法会如何？")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180619.png",alt:""}})]),s._v(" "),a("p",[s._v("如果本身（FG）也存在相同的方法那么优先级：FG > G > F > H。"),a("strong",[s._v("super.a()")]),s._v(" 执行的是 G 中的 a 方法。")]),s._v(" "),a("p",[s._v("输出结果：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[s._v("flutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" G a\nflutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" FG a\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("更复杂的来啦，请看如下混合关系：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180622.png",alt:""}})]),s._v(" "),a("p",[s._v("BB 为一个抽象类，有一个构造函数，其中执行 init 方法，GB 和 PB 为一个混合类型，限定了只有 BB 或者其子类才能混合，WFB 继承 BB，并混合GB、PB，此时创建 WFB 对象，")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[s._v("WFB wfb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("WFB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("输出结果是什么？")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[s._v("flutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" BB Constructor\nflutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" BB init\nflutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" GB init\nflutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" PB init\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("是不是很诧异，按照上面的逻辑不是应该只调用 PB 的 init 方法吗？")]),s._v(" "),a("p",[s._v("你理解的没有错，的确只调用了PB 的 init 方法，但是 PB 的 init 方法中调用了"),a("strong",[s._v("super.init()")]),s._v("，这个才是重点，PB 通过 super.init 调用到了GB中的 init 方法， GB 通过 super.init 调用到了 BB 中的 init 方法，所以最终输出的就是上面的结果。")]),s._v(" "),a("p",[s._v("这个一定要理解其中的调用顺序，因为的 Flutter Framework 的入口函数 "),a("strong",[s._v("runApp")]),s._v(" 中就是此形式：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180627.png",alt:""}})]),s._v(" "),a("p",[s._v("WidgetsFlutterBinding.ensureInitialized 方法如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180631.png",alt:""}})]),s._v(" "),a("p",[s._v("WidgetsFlutterBinding 混合结构如下：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WidgetsFlutterBinding")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BindingBase")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" GestureBinding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" SchedulerBinding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ServicesBinding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" PaintingBinding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" SemanticsBinding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" RendererBinding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" WidgetsBinding "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("BindingBase 及构造函数如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180634.png",alt:""}})]),s._v(" "),a("p",[s._v("其执行了 initInstances 和 initServiceExtensions 方法。看下面混合的顺序：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180639.png",alt:""}})]),s._v(" "),a("p",[s._v("从后到前依次执行其 initInstances 和 initServiceExtensions（如果有） 方法，由于 initInstances 和 initServiceExtensions 方法中首先执行 "),a("strong",[s._v("super.initInstances()")]),s._v(" 和 "),a("strong",[s._v("super.initServiceExtensions()")]),s._v(" ，所以最后执行的顺序为：BindingBase -> GestureBinding -> SchedulerBinding -> ServicesBinding -> PaintingBinding -> SemanticsBinding -> RendererBindinsg -> WidgetsBinding 。")]),s._v(" "),a("h3",{attrs:{id:"类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[s._v("#")]),s._v(" 类型")]),s._v(" "),a("p",[s._v("还是上面的F、G、H 三个类，那么 FG 的类型是什么，看下面的判断会输出什么？")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.laomengit.com/20210131180642.png",alt:""}})]),s._v(" "),a("p",[s._v("输出：")]),s._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[s._v("flutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" FG "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("is")]),s._v(" F "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\nflutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" FG "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("is")]),s._v(" G "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\nflutter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" FG "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("is")]),s._v(" H "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("所以混合后的类型是超类的子类型。")]),s._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("Mixins")]),s._v(" 使我们可以在无需继承父类的情况下为此类添加父类的“功能”，可以在同一个类中具有一个父级和多个 "),a("strong",[s._v("mixin")]),s._v(" 组件。")]),s._v(" "),a("li",[a("strong",[s._v("Mixins")]),s._v(" 不可以声明任何构造函数。")]),s._v(" "),a("li",[s._v("给 "),a("strong",[s._v("Mixins")]),s._v(" 添加限定条件使用 "),a("strong",[s._v("on")]),s._v(" 关键字。")]),s._v(" "),a("li",[s._v("混合使用 "),a("strong",[s._v("with")]),s._v(" 关键字，with 后面可以是 "),a("strong",[s._v("class")]),s._v("、"),a("strong",[s._v("abstract class")]),s._v(" 和 "),a("strong",[s._v("mixin")]),s._v(" 的类型。")]),s._v(" "),a("li",[a("strong",[s._v("Mixins")]),s._v(" 不是多重继承，相反，它只是在多个层次结构中重用类中的代码而无需扩展它们的一种方式。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);